安装
	在Windows上安装Git
		Windows下要使用很多Linux/Unix的工具时，需要Cygwin这样的模拟环境，从http://msysgit.github.io/下载msysgit，模拟环境和Git都打包好了
		安装完成后，还需要最后一步设置，在命令行输入：
		$ git config --global user.name "Your Name"
		$ git config --global user.email "email@example.com"
	搭建服务器:
		adduser git
		mkdir /home/git/.ssh/
		添加用户公钥在/home/git/.ssh/authorized_keys 中
		mkdir /home/zhoucy/project.git
		chown -R git:git /home/zhoucy/project.git
		cd /home/zhoucy/project.git
		git --bare init
基本操作
	创建版本库
		$ mkdir learngit
		$ cd learngit
		$ git init
	把文件添加到版本库
		文件一定要放到learngit目录下
		$ git add readme.txt
		$ git commit -m "wrote a readme file"
	查看仓库状态:
		git status
	比较文件不同:
		git diff readme.txt
	查看工作区和版本库里面最新版本的区别:git diff HEAD -- readme.txt
	显示从最近到最远的提交日志:
		git log
		一行显示加上参数:--pretty=oneline
	回退版本:
		上一个版本就是HEAD^，上上一个版本就是HEAD^^，当然往上100个版本写100个^比较容易数不过来，所以写成HEAD~100
		$ git reset --hard HEAD^
	记录你的每一次命令:
		git reflog
	找到ID可以返回某一个版本:
		git reset --hard c0b7ac2
	恢复到上一个版本的状态或把误删的文件恢复到最新版本:
		git checkout -- readme.txt
	把暂存区的修改撤销掉:
		git reset HEAD file
	从版本库中删除该文件:
		git rm test.txt
		git commit -m "remove test.txt"
远程仓库
	创建SSH Key:
		ssh-keygen -t rsa -C "zhoucy@163.com"
		公钥在.ssh/id_rsa.pub里
	把一个已有的本地仓库与远程库关联
		git remote add origin git@github.com:specschou/test.git
	把本地库推送到远程库:
		git push -u origin master
	从远程库克隆
		git clone git@github.com:specschou/test1.git
分支操作		
	创建dev分支，然后切换到dev分支:
		git checkout -b dev
		git checkout命令加上-b参数表示创建并切换，相当于以下两条命令:
		git branch dev
		git checkout dev
	查看当前分支:
		git branch
	把dev分支的工作成果合并到master分支上:
		git merge dev
	删除dev分支:
		git branch -d dev
	分支管理策略:
		通常Git会用Fast forward模式，但是删除分支后，会丢掉分支信息，--no-ff参数可以禁用Fast forward
		git merge --no-ff -m "merge with no-ff" dev
	Bug分支
		修复bug时，我们会通过创建新的bug分支进行修复，然后合并，最后删除；
		当手头工作没有完成时，先把工作现场git stash一下，然后去修复bug，修复后，再git stash pop，回到工作现场。
	Feature分支
		每添加一个新功能，最好新建一个feature分支
		git checkout -b feature-vulcan
		如果这个功能不需要，那删除分支，这时候删除失败，需要强行删除:
		git branch -D feature-vulcan
	查看远程库的信息:
		git remote
		git remote -v
	推送分支:
		git push origin dev
	是否推送分支:
		master分支是主分支，因此要时刻与远程同步；
		dev分支是开发分支，团队所有成员都需要在上面工作，所以也需要与远程同步；
		bug分支只用于在本地修复bug，就没必要推到远程了，除非老板要看看你每周到底修复了几个bug；
		feature分支是否推到远程，取决于你是否和你的小伙伴合作在上面开发。
	抓取分支:
		git branch --set-upstream dev origin/dev
		git pull
	多人协作的工作模式通常是这样：
		首先，可以试图用git push origin branch-name推送自己的修改；
		如果推送失败，则因为远程分支比你的本地更新，需要先用git pull试图合并；
		如果合并有冲突，则解决冲突，并在本地提交；
		没有冲突或者解决掉冲突后，再用git push origin branch-name推送就能成功！
		如果git pull提示“no tracking information”，则说明本地分支和远程分支的链接关系没有创建，用命令git branch --set-upstream branch-name origin/branch-name。
标签操作:
	创建标签:
		git tag v1.0
	查看标签:
		git show v0.9
	删除标签:
		git tag -d v1.0
	推送标签:
		git push origin v1.0
	一次性推送全部尚未推送到远程的本地标签:
		git push origin --tags
	删除远程标签:
		git tag -d v0.9
		git push origin :refs/tags/v0.9
